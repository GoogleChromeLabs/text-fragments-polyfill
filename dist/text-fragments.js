const e=["text"],t=e=>{const t=/^(?:(.+?)-,)?(?:(.+?))(?:,(.+?))?(?:,-(.+?))?$/;return{prefix:decodeURIComponent(e.replace(t,"$1")),textStart:decodeURIComponent(e.replace(t,"$2")),textEnd:decodeURIComponent(e.replace(t,"$3")),suffix:decodeURIComponent(e.replace(t,"$4"))}},n=e=>e.replace(/[\\^$.*+?()[\]{}|]/g,"\\$&"),r=e=>{const t=o(e.prefix),r=o(e.textStart),c=o(e.textEnd),a=o(e.suffix),i={behavior:"smooth",block:"nearest",inline:"nearest"};if(!t.length&&!a.length&&1===r.length&&r[0].parentNode)if(c.length){if(1===c.length&&c[0].parentNode&&c[0].parentNode===r[0].parentNode){const t=r[0].parentNode,o=r[0].textContent.replace(new RegExp(`(^.*?)(${n(e.textStart)})(.*?)(${e.textEnd})(.*?$)`,"m"),"$1<mark>$2$3$4</mark>$5");t.textContent="",t.insertAdjacentHTML("afterbegin",o),t.scrollIntoView(i)}}else{const t=r[0].parentNode,o=r[0].textContent.replace(new RegExp(`(^.*?)(${n(e.textStart)})(.*?$)`,"m"),"$1<mark>$2</mark>$3");t.textContent="",t.insertAdjacentHTML("afterbegin",o),t.scrollIntoView(i)}t.length},o=e=>{if(!e)return[];const t=document.body,n=document.createTreeWalker(t,NodeFilter.SHOW_TEXT,{acceptNode:t=>{if(t.textContent.includes(e))return NodeFilter.FILTER_ACCEPT}}),r=[];let o=n.currentNode;for(;o;)r.push(o),o=n.nextNode();return r.slice(1)};(()=>{if("fragmentDirective"in Location.prototype)return;Location.prototype.fragmentDirective={};(()=>{const n=document.location.hash;if(!n)return;(e=>{const t={};for(const[n,o]of Object.entries(e))"text"===n&&(t[n]=o.map(e=>r(e)))})((e=>{const n={};for(const[r,o]of Object.entries(e))"text"===r&&(n[r]=o.map(e=>t(e)));return n})((t=>{const n=t.replace(/#.*?:~:(.*?)/,"$1");if(!n)return;const r=new URLSearchParams(n),o={};return e.forEach(e=>{r.has(e)&&(o[e]=r.getAll(e))}),o})(n)))})()})();
